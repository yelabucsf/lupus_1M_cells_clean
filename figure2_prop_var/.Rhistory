exp <- NULL;
n <- rnorm(100,100,20)
for(i in a_prop) {
a_exp <- c(a_exp, sum(rnorm(i*n,0,0.1)))
b_exp <- c(b_exp, sum(rnorm((1-i)*n,10,0.1)))
}
exp <- a_exp+b_exp
exp_norm <- exp/n;
a_exp_norm <- a_exp/(a_prop*n)
b_exp_norm <- b_exp/(b_prop*n)
a_exp_norm2 <- a_exp/(n)
b_exp_norm2 <- b_exp/(n)
cor(a_exp_norm, a_prop)
cor(a_exp_norm2, a_prop)
cor(b_exp_norm, b_prop)
cor(b_exp_norm2, b_prop)
a_prop <- rbeta(100,2,10)
b_prop <- 1-a_prop
a_exp <- NULL;
b_exp <- NULL;
exp <- NULL;
n <- rnorm(100,100,20)
for(i in a_prop) {
a_exp <- c(a_exp, sum(rnorm(i*n,0,0.1)))
b_exp <- c(b_exp, sum(rnorm((1-i)*n,10,0.1)))
}
exp <- a_exp+b_exp
exp_norm <- exp/n;
a_exp_norm <- a_exp/(a_prop*n)
b_exp_norm <- b_exp/(b_prop*n)
a_exp_norm2 <- a_exp/(n)
b_exp_norm2 <- b_exp/(n)
cor(a_exp_norm, a_prop)
cor(a_exp_norm2, a_prop)
cor(b_exp_norm, b_prop)
cor(b_exp_norm2, b_prop)
a_prop <- rbeta(100,2,10)
b_prop <- 1-a_prop
a_exp <- NULL;
b_exp <- NULL;
exp <- NULL;
n <- rnorm(100,100,20)
for(i in a_prop) {
a_exp <- c(a_exp, sum(rnorm(i*n,0,0.1)))
b_exp <- c(b_exp, sum(rnorm((1-i)*n,10,0.1)))
}
exp <- a_exp+b_exp
exp_norm <- exp/n;
a_exp_norm <- a_exp/(a_prop*n)
b_exp_norm <- b_exp/(b_prop*n)
a_exp_norm2 <- a_exp/(n)
b_exp_norm2 <- b_exp/(n)
cor(a_exp_norm, a_prop)
cor(a_exp_norm2, a_prop)
cor(b_exp_norm, b_prop)
cor(b_exp_norm2, b_prop)
cor(b_expr, b_prop)
cor(b_exp, b_prop)
cor(b_exp_norm, b_prop)
cor(b_exp_norm2, b_prop)
cor(a_expr, a_prop)
cor(a_exp, a_prop)
cor(a_exp_norm, a_prop)
cor(a_exp_norm2, a_prop)
setwd("~/Box Sync/Papers/In Preparation/2018.Subramaniam.sceQTL/figures/lupus_paper/figure2.prop.var")
cd14_counts <- read.table("cd14.ct.counts")
pbmc_counts <- read.table("pbmc.counts")
props <- read.table("props")
cd14_counts <- read.table("cd14.ct.counts")
pbmc_counts <- read.table("cd14.pbmc.counts")
props <- read.table("props")
pbmc_counts
dim(pbmc_counts)
dim(cd14_counts)
length(props)
props
dim(props)
cd14_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
props <- read.table("cell.props")
cells <- read.table("cell.counts")
cells
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts;
ct_norm <- ct_counts/cell_counts;
length(cell_counts)
cell_counts
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
pbmc_norm
var(pbmc_norm)
ct_norm
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
ct_counts
ct_norm2 <- ct_counts/(cell_prop*cell_counts[,1])
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props*cell_counts[,1])
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
ct_norm2
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props*cell_counts[,1])
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cell_props*cell_counts[,1]
cell_props
cell_props*cell_counts[,1]/100
cell_props*cell_counts[,1]/100
cell_props
cell_props[1,]*cell_counts[,1]/100
cell_props[1,]
cell_counts[,1]
8567466*cell_props[1,]/100
dim(cell_counts)
cell_props%*%cell_counts[,1]
cell_props%*%cell_counts[,1,drop=F]
dim(cell_props)
dim(cell_counts)
dim(pbmc_counts)
dim(ct_counts)
cell.counts
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props*cell_counts[,1])
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cor(ct_norm2, cell_props)
cell_counts
dim(cell_counts)
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props*cell_counts[,1])
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cell_props%*%cell_counts[,1,drop=F]
cell_props%*%cell_counts[,1,drop=F]
dim(cell_counts)
dim(cell_props)
cell_counts
dim(cell_props)
ct_counts
cell_props
cell_counts
dim(cell_props)
dim(ct_counts)
cell_props
cell_props./cell_counts
sapply(1:col(cell_props), function(x) {cell_props[,x]/cell_counts})
sapply(1:col(cell_props), function(x) {cell_props[,x]/cell_counts})
dim(cell_props)
sapply(1:col(cell_props), function(x) {cell_props[,x]/cell_counts})
cell_counts)
sapply(1:ncol(cell_props), function(x) {cell_props[,x]/cell_counts})
apply(cell_props, 2, function(x) {x/cell_counts})
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props)
ct_norm3 <- apply(cell_props, 2, function(x) {x/cell_counts})
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cor(ct_norm3, cell_props)
dim(ct_norme)
dim(ct_norm3)
ct_norm3
dim(ct_norm3)
length(ct_norm3)
dim(cell_props)
cell_counts
dim(cell_counts)
ct_norm3 <- apply(cell_props, 2, function(x) {x/cell_counts[,1]})
ct_norm3
dim(ct_norm3)
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props)
ct_norm3 <- apply(cell_props, 2, function(x) {x/cell_counts[,1]})
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cor(ct_norm3, cell_props)
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props)
ct_norm3 <- ct_counts/apply(cell_props, 2, function(x) {x*cell_counts[,1]})
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cor(ct_norm3, cell_props)
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props)
ct_norm3 <- ct_counts/apply(cell_props, 2, function(x) {x*cell_counts[,1]})
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cor(ct_norm3, cell_props)
fit <- lm(pbmc_norm~cell_props[,1])
var(residual(fit))
pbmc_norm
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props)
ct_norm3 <- ct_counts/apply(cell_props, 2, function(x) {x*cell_counts[,1]})
var(pbmc_norm)
sum(apply(ct_norm,2,var))
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cor(ct_norm3, cell_props)
fit <- lm(pbmc_norm[,1]~cell_props[,1])
var(residuals(fit))
ct_counts <- read.table("ct.counts")
pbmc_counts <- read.table("pbmc.counts")
cell_props <- read.table("cell.props")
cell_counts <- read.table("cell.counts")
pbmc_norm <- pbmc_counts/cell_counts[,1];
ct_norm <- ct_counts/cell_counts[,1];
ct_norm2 <- ct_counts/(cell_props)
ct_norm3 <- ct_counts/apply(cell_props, 2, function(x) {x*cell_counts[,1]})
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cor(ct_norm3, cell_props)
fit <- lm(pbmc_norm[,1]~cell_props[,1])
var(pbmc_norm)
var(residuals(fit))
sum(apply(ct_norm,2,var))
sum(apply(ct_norm2,2,var))
sum(apply(ct_norm3,2,var))
apply(ct_norm3,2,var)
cor(ct_norm, cell_props)
cor(ct_norm2, cell_props)
cor(ct_norm3, cell_props)
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
pve
sum(sigmas)
var(cell_counts)
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_counts)
sum(sigma)
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
sum(pve)
pve
sigmas
var(pbmc_counts)
var(pbmc_norm)
sum(sigmas)
sum(cov(ct_norm)-sum(sigmas))
sum(cov(ct_norm))-sum(sigmas)
sum(cov(ct_norm))-sum(sigmas)+sum(sigmas)
ct_counts
cell_counts
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_props <- read.table("cell.props")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_norm)
sum(sigmas)
sum(cov(ct_norm))-sum(sigmas)
ct_props
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_props <- read.table("cell.props")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
pbmc_res <- residuals(lm(pbmc_norm~ct_props))
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_norm)
sum(sigmas)
sum(cov(ct_norm))-sum(sigmas)
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_props <- read.table("cell.props")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
pbmc_res <- residuals(lm(pbmc_norm~ct_props))
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_res)
sum(sigmas)
sum(cov(ct_norm))-sum(sigmas)
pbmc_norm
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_props <- read.table("cell.props")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
pbmc_res <- residuals(lm(pbmc_norm[,1]~ct_props))
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_res)
sum(sigmas)
sum(cov(ct_norm))-sum(sigmas)
ct_props
dim(ct_props)
length(pbmc_norm[,1])
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_props <- read.table("cell.props")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
pbmc_res <- residuals(lm(pbmc_norm[,1]~t(ct_props)))
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_res)
sum(sigmas)
sum(cov(ct_norm))-sum(sigmas)
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_props <- read.table("cell.props")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
pbmc_res <- residuals(lm(pbmc_norm[,1]~ct_props))
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_res)
sum(sigmas)
sum(cov(ct_norm))-sum(sigmas)
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_props <- read.table("cell.props")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
pbmc_res <- residuals(lm(pbmc_norm[,1]~ct_props))
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_res)
sum(sigmas)
sum(cov(ct_norm))-sum(sigmas)
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_props <- read.table("cell.props")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
pbmc_res <- residuals(lm(pbmc_norm[,1]~as.matrix(ct_props)))
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_res)
sum(sigmas)
sum(cov(ct_norm))-sum(sigmas)
#do the %VE as before with cell type regression for the between
#for within stay on the poission scale and do as below:
pbmc_counts <- read.table("pbmc.counts")
ct_counts <- read.table("ct.counts")
cell_counts <- read.table("cell.counts")
ct_props <- read.table("cell.props")
ct_norm <- ct_counts/cell_counts[,1]; #replace cell counts with total read depth *10^x (x big enough to prevent underflow)
pbmc_norm <- pbmc_counts/cell_counts[,1];
pbmc_res <- residuals(lm(pbmc_norm[,1]~as.matrix(ct_props)))
#note that taking log will bug out because of 0 values and adding 1 will produce vastly different results than adding 0.0001.
cv = cov(ct_norm) #get covariance matrix
sigmas = diag(cv)
#poor mans version without cov
pve = sigmas/sum(sigmas) #percent variance explained
#if you want to account for cvoaraince then add in the off diagonal terms of cv as before.
var(pbmc_res)
var_explained <- sum(sigmas)
covar_explained <- sum(cov(ct_norm))-sum(sigmas)
var_explained+covar_explained
var_explained
covar_explained
