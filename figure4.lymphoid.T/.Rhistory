jevar1_std = b1_std^2*var(vars[,1])
jevar2_std = b2_std^2*var(vars[,2])
jcov_std = cov(vars[,1],vars[,2])*2*b1_std*b2_std
b1_std_noint = summary(lm(y_std~vars-1))$coef[1,1]
b2_std_noint = summary(lm(y_std~vars-1))$coef[2,1]
jevar1_std_noint = b1_std^2*var(vars[,1])
jevar2_std_noint = b2_std^2*var(vars[,2])
jcov_std_noint = cov(vars[,1],vars[,2])*2*b1_std*b2_std
vars_std = apply(vars,2,function(x) {(x-mean(x))/sd(x)})
b1_new = summary(lm(y_std~vars_std))$coef[1,1]
b2_new = summary(lm(y_std~vars_std))$coef[2,1]
jevar1_new = b1_new*cov(vars_std[,1],y_std)
jevar2_new = b2_new*var(vars_std[,2],y_std)
jcov_new = cov(vars_std[,1],vars_std[,2])*2*b1_new*b2_new
cat('components:\n')
cat('true: ',tvar1,tvar2,tcov,
'marginal est: ',evar1,evar2,'
joint est: ',jevar1,jevar2,jcov,
'joint_std est: ',jevar1_std,jevar2_std,jcov_std,
'joint_std_noint est: ',jevar1_std_noint,jevar2_std_noint,jcov_std_noint,
'joint_new est: ',jevar1_new,jevar2_new,jcov_new,'\n')
library(mvtnorm)
#covariance matrix
sig = matrix(c(0.5,0.2,0.2,0.5),nrow=2,ncol=2)
#random corrleated variables
vars = rmvnorm(10000,c(0,0),sig)
#the output without noise
yraw = vars[,1]*0.2 + vars[,2]*0.4
#the output with noise
y = yraw + rnorm(1000)
#exact variance explained by vars
tvar = var(yraw)/var(y)
#estimated from regression
evar = summary(lm(y~vars))$adj.r.squared
y_std = (y-mean(y))/sd(y)
evar_std = summary(lm(y_std~vars))$adj.r.squared
cat('total:\n')
cat('true: ',tvar,'est: ',evar,'est2: ',evar_std,'\n')
#by variable
tvar1 = var(vars[,1]*0.2)/var(y)
tvar2 = var(vars[,2]*0.4)/var(y)
tcov = cov(vars[,1],vars[,2])*2*0.2*0.4
#by marginal regression
evar1 = summary(lm(y~vars[,1]))$adj.r.squared
evar2 = summary(lm(y~vars[,2]))$adj.r.squared
#by joint regression
b1 = summary(lm(y~vars))$coef[2,1]
b2 = summary(lm(y~vars))$coef[3,1]
jevar1 = b1^2*var(vars[,1])
jevar2 = b2^2*var(vars[,2])
jcov = cov(vars[,1],vars[,2])*2*b1*b2
b1_std = summary(lm(y_std~vars))$coef[2,1]
b2_std = summary(lm(y_std~vars))$coef[3,1]
jevar1_std = b1_std^2*var(vars[,1])
jevar2_std = b2_std^2*var(vars[,2])
jcov_std = cov(vars[,1],vars[,2])*2*b1_std*b2_std
b1_std_noint = summary(lm(y_std~vars-1))$coef[1,1]
b2_std_noint = summary(lm(y_std~vars-1))$coef[2,1]
jevar1_std_noint = b1_std^2*var(vars[,1])
jevar2_std_noint = b2_std^2*var(vars[,2])
jcov_std_noint = cov(vars[,1],vars[,2])*2*b1_std*b2_std
vars_std = apply(vars,2,function(x) {(x-mean(x))/sd(x)})
b1_new = summary(lm(y_std~vars_std))$coef[1,1]
b2_new = summary(lm(y_std~vars_std))$coef[2,1]
jevar1_new = b1_new*cov(vars_std[,1],y_std)
jevar2_new = b2_new*var(vars_std[,2],y_std)
jcov_new = cov(vars_std[,1],vars_std[,2])*2*b1_new*b2_new
cat('components:\n')
cat('true: ',tvar1,tvar2,tcov,'\n',
'marginal est: ',evar1,evar2,'\n',
'joint est: ',jevar1,jevar2,jcov,'\n',
'joint_std est: ',jevar1_std,jevar2_std,jcov_std,'\n',
'joint_std_noint est: ',jevar1_std_noint,jevar2_std_noint,jcov_std_noint,'\n'
'joint_new est: ',jevar1_new,jevar2_new,jcov_new,'\n')
library(mvtnorm)
#covariance matrix
sig = matrix(c(0.5,0.2,0.2,0.5),nrow=2,ncol=2)
#random corrleated variables
vars = rmvnorm(10000,c(0,0),sig)
#the output without noise
yraw = vars[,1]*0.2 + vars[,2]*0.4
#the output with noise
y = yraw + rnorm(1000)
#exact variance explained by vars
tvar = var(yraw)/var(y)
#estimated from regression
evar = summary(lm(y~vars))$adj.r.squared
y_std = (y-mean(y))/sd(y)
evar_std = summary(lm(y_std~vars))$adj.r.squared
cat('total:\n')
cat('true: ',tvar,'est: ',evar,'est2: ',evar_std,'\n')
#by variable
tvar1 = var(vars[,1]*0.2)/var(y)
tvar2 = var(vars[,2]*0.4)/var(y)
tcov = cov(vars[,1],vars[,2])*2*0.2*0.4
#by marginal regression
evar1 = summary(lm(y~vars[,1]))$adj.r.squared
evar2 = summary(lm(y~vars[,2]))$adj.r.squared
#by joint regression
b1 = summary(lm(y~vars))$coef[2,1]
b2 = summary(lm(y~vars))$coef[3,1]
jevar1 = b1^2*var(vars[,1])
jevar2 = b2^2*var(vars[,2])
jcov = cov(vars[,1],vars[,2])*2*b1*b2
b1_std = summary(lm(y_std~vars))$coef[2,1]
b2_std = summary(lm(y_std~vars))$coef[3,1]
jevar1_std = b1_std^2*var(vars[,1])
jevar2_std = b2_std^2*var(vars[,2])
jcov_std = cov(vars[,1],vars[,2])*2*b1_std*b2_std
b1_std_noint = summary(lm(y_std~vars-1))$coef[1,1]
b2_std_noint = summary(lm(y_std~vars-1))$coef[2,1]
jevar1_std_noint = b1_std^2*var(vars[,1])
jevar2_std_noint = b2_std^2*var(vars[,2])
jcov_std_noint = cov(vars[,1],vars[,2])*2*b1_std*b2_std
vars_std = apply(vars,2,function(x) {(x-mean(x))/sd(x)})
b1_new = summary(lm(y_std~vars_std))$coef[1,1]
b2_new = summary(lm(y_std~vars_std))$coef[2,1]
jevar1_new = b1_new*cov(vars_std[,1],y_std)
jevar2_new = b2_new*var(vars_std[,2],y_std)
jcov_new = cov(vars_std[,1],vars_std[,2])*2*b1_new*b2_new
cat('components:\n')
cat('true: ',tvar1,tvar2,tcov,'\n',
'marginal est: ',evar1,evar2,'\n',
'joint est: ',jevar1,jevar2,jcov,'\n',
'joint_std est: ',jevar1_std,jevar2_std,jcov_std,'\n',
'joint_std_noint est: ',jevar1_std_noint,jevar2_std_noint,jcov_std_noint,'\n',
'joint_new est: ',jevar1_new,jevar2_new,jcov_new,'\n')
library(mvtnorm)
#covariance matrix
sig = matrix(c(0.5,0.2,0.2,0.5),nrow=2,ncol=2)
#random corrleated variables
vars = rmvnorm(10000,c(0,0),sig)
#the output without noise
yraw = vars[,1]*0.2 + vars[,2]*0.4
#the output with noise
y = yraw + rnorm(1000)
#exact variance explained by vars
tvar = var(yraw)/var(y)
#estimated from regression
evar = summary(lm(y~vars))$adj.r.squared
y_std = (y-mean(y))/sd(y)
evar_std = summary(lm(y_std~vars))$adj.r.squared
cat('total:\n')
cat('true: ',tvar,'est: ',evar,'est2: ',evar_std,'\n')
#by variable
tvar1 = var(vars[,1]*0.2)/var(y)
tvar2 = var(vars[,2]*0.4)/var(y)
tcov = cov(vars[,1],vars[,2])*2*0.2*0.4
#by marginal regression
evar1 = summary(lm(y~vars[,1]))$adj.r.squared
evar2 = summary(lm(y~vars[,2]))$adj.r.squared
#by joint regression
b1 = summary(lm(y~vars))$coef[2,1]
b2 = summary(lm(y~vars))$coef[3,1]
jevar1 = b1^2*var(vars[,1])
jevar2 = b2^2*var(vars[,2])
jcov = cov(vars[,1],vars[,2])*2*b1*b2
b1_std = summary(lm(y_std~vars))$coef[2,1]
b2_std = summary(lm(y_std~vars))$coef[3,1]
jevar1_std = b1_std^2*var(vars[,1])
jevar2_std = b2_std^2*var(vars[,2])
jcov_std = cov(vars[,1],vars[,2])*2*b1_std*b2_std
b1_std_noint = summary(lm(y_std~vars-1))$coef[1,1]
b2_std_noint = summary(lm(y_std~vars-1))$coef[2,1]
jevar1_std_noint = b1_std^2*var(vars[,1])
jevar2_std_noint = b2_std^2*var(vars[,2])
jcov_std_noint = cov(vars[,1],vars[,2])*2*b1_std*b2_std
vars_std = apply(vars,2,function(x) {(x-mean(x))/sd(x)})
b1_new = summary(lm(y_std~vars_std))$coef[1,1]
b2_new = summary(lm(y_std~vars_std))$coef[2,1]
jevar1_new = b1_new*cov(vars_std[,1],y_std)
jevar2_new = b2_new*cov(vars_std[,2],y_std)
jcov_new = cov(vars_std[,1],vars_std[,2])*2*b1_new*b2_new
cat('components:\n')
cat('true: ',tvar1,tvar2,tcov,'\n',
'marginal est: ',evar1,evar2,'\n',
'joint est: ',jevar1,jevar2,jcov,'\n',
'joint_std est: ',jevar1_std,jevar2_std,jcov_std,'\n',
'joint_std_noint est: ',jevar1_std_noint,jevar2_std_noint,jcov_std_noint,'\n',
'joint_new est: ',jevar1_new,jevar2_new,jcov_new,'\n')
b1_new
b2_new
library(mvtnorm)
#covariance matrix
sig = matrix(c(0.5,0.2,0.2,0.5),nrow=2,ncol=2)
#random corrleated variables
vars = rmvnorm(10000,c(0,0),sig)
#the output without noise
yraw = vars[,1]*0.2 + vars[,2]*0.4
#the output with noise
y = yraw + rnorm(1000)
#exact variance explained by vars
tvar = var(yraw)/var(y)
#estimated from regression
evar = summary(lm(y~vars))$adj.r.squared
y_std = (y-mean(y))/sd(y)
evar_std = summary(lm(y_std~vars))$adj.r.squared
cat('total:\n')
cat('true: ',tvar,'est: ',evar,'est2: ',evar_std,'\n')
#by variable
tvar1 = var(vars[,1]*0.2)/var(y)
tvar2 = var(vars[,2]*0.4)/var(y)
tcov = cov(vars[,1],vars[,2])*2*0.2*0.4
#by marginal regression
evar1 = summary(lm(y~vars[,1]))$adj.r.squared
evar2 = summary(lm(y~vars[,2]))$adj.r.squared
#by joint regression
b1 = summary(lm(y~vars))$coef[2,1]
b2 = summary(lm(y~vars))$coef[3,1]
jevar1 = b1^2*var(vars[,1])
jevar2 = b2^2*var(vars[,2])
jcov = cov(vars[,1],vars[,2])*2*b1*b2
b1_std = summary(lm(y_std~vars))$coef[2,1]
b2_std = summary(lm(y_std~vars))$coef[3,1]
jevar1_std = b1_std^2*var(vars[,1])
jevar2_std = b2_std^2*var(vars[,2])
jcov_std = cov(vars[,1],vars[,2])*2*b1_std*b2_std
b1_std_noint = summary(lm(y_std~vars-1))$coef[1,1]
b2_std_noint = summary(lm(y_std~vars-1))$coef[2,1]
jevar1_std_noint = b1_std^2*var(vars[,1])
jevar2_std_noint = b2_std^2*var(vars[,2])
jcov_std_noint = cov(vars[,1],vars[,2])*2*b1_std*b2_std
vars_std = apply(vars,2,function(x) {(x-mean(x))/sd(x)})
b1_new = summary(lm(y_std~vars_std-1))$coef[1,1]
b2_new = summary(lm(y_std~vars_std-1))$coef[2,1]
jevar1_new = b1_new*cov(vars_std[,1],y_std)
jevar2_new = b2_new*cov(vars_std[,2],y_std)
jcov_new = cov(vars_std[,1],vars_std[,2])*2*b1_new*b2_new
cat('components:\n')
cat('true: ',tvar1,tvar2,tcov,'\n',
'marginal est: ',evar1,evar2,'\n',
'joint est: ',jevar1,jevar2,jcov,'\n',
'joint_std est: ',jevar1_std,jevar2_std,jcov_std,'\n',
'joint_std_noint est: ',jevar1_std_noint,jevar2_std_noint,jcov_std_noint,'\n',
'joint_new est: ',jevar1_new,jevar2_new,jcov_new,'\n')
a<-fread("~/Downloads/projection.csv")
library(data.table)
a<-fread("~/Downloads/projection.csv")
a[1,]
plot(a$TSNE-1, a$TSNE-2)
plot(a$"TSNE-1", a$"TSNE-2")
a<-frea("~/Downloads/PBMC.empirical.pval.txt")
a<-fread("~/Downloads/PBMC.empirical.pval.txt")
a[1,]
hist(a$Empirical)
qqunif(a$Empirical)
library(gap)
install.packages("gap")
library(gap)
qqunif(a$Empirical)
library(gap)
qqunif(a$Empirical)
qvalues(a$Empirical)
library(qvalues)
library(qvalue)
install.packages("qvalues")
install.packages("qvalue")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("qvalue", version = "3.8")
library(qvalue)
qvalues(a$Empirical)
q.values(a$Empirical)
qvalue(a$Empirical)
qvalue(a$Empirical)$qvalue
qvalue(a$Empirical)$qvalue<0.05
length(qvalue(a$Empirical)$qvalue<0.05)
length(which(qvalue(a$Empirical)$qvalue<0.05))
length(which(qvalue(a$Empirical)$qvalue<0.1))
length(which(qvalue(a$Empirical)$qvalue<0.2))
length(which(qvalue(a$Empirical)$qvalue<0.3))
b <- fread("Downloads/ifn.baseline.genes.fc.16.minpv.gene.matrix.eqtl.cis.txt")
b[1,]
hist(b$V2)
b<-fread("~/Downloads/ifn.baseline.genes.fc.16.cis.all.snps.sig.unique.txt")
b[1,]
a
sapply(a$Actual, function(x) {strsplit(x, "_")[[0]][[1]]}
)
q
q()
sapply(a$Actual, function(x) {strsplit(x, "_")[[1]][[1]]})
sapply(a$Actual, function(x) {strsplit(x, "_")[[1]][[2]]})
a$gene = sapply(a$Actual, function(x) {strsplit(x, "_")[[1]][[2]]})
a
b
a[match(b$gene, a$gene),]
a[na.omit(match(b$gene, a$gene)),]
qunif(a[na.omit(match(b$gene, a$gene)),])
qunif(a[na.omit(match(b$gene, a$gene)),"Empirical"])
qqunif(a[na.omit(match(b$gene, a$gene)),"Empirical"])
qqunif(a$Empirical)
qqunif(a[na.omit(match(b$gene, a$gene)),"Empirical"])
a
a[na.omit(match(b$gene, a$gene)),"Empirical"]
a[na.omit(match(b$gene, a$gene)),]
a.small <- a[na.omit(match(b$gene, a$gene)),]
a.small[order(a$Empirical),]
a.small[order(a.small$Empirical),]
a.small[order(a.small$Empirical),][1:10,]
load("~/Downloads/CD4.12.6854695.rda")
ls()
library(data.table)
load("~/Downloads/CD4.12.6854695.rda")
ls()
a
cells
dfs.use
x
a
df.use
head(df.use0
)
head(df.use)
lm(df.use$expr~df.use$genotype)
anova(lm(df.use$expr~df.use$genotype))
anova(lm(df.use$expr~df.use$genotype*ifn))
anova(lm(df.use$expr~df.use$genotype*df$ifn))
anova(lm(df.use$expr~df.use$genotype*df.use$ifn))
anova(lm(df.use$expr~df.use$genotype*df.use$ifn))
df.use.asian <- df.use[df.use$racedesc=="ASIAN",]
anova(lm(df.use.asian$expr~df.use.asian$genotype*df.use.asian$ifn))
df.use.white <- df.use[df.use$racedesc=="WHITE",]
anova(lm(df.use.white$expr~df.use.white$genotype*df.use.white$ifn))
df
df.use
anova(lm(df.use$expr~df.use$batch+df.use$genotype*df.use$ifn))
a <- fread("~/Downloads/Tc_GiniIndex.csv")
a[1,]
a$gini
plot(a$ind_cov,a$gini)
plot(as.factor(a$ind_cov),a$gini)
a[1,]
a[order(a$gini,decreasing=T),]
a[order(a$gini,decreasing=T),][1:10,]
a <- fread("~/Downloads/Th_GiniIndex.csv")
b <- fread("~/Downloads/Th_GiniIndex.csv")
b[order(b$gini,decreasing=T),][1:10,]
a <- fread("~/Downloads/Th_GiniIndex.csv")
a <- fread("~/Downloads/Tc_GiniIndex.csv")
a[order(a$gini,decreasing=T),][1:10,]
8/10
1/0.08888889
1/0.09444444
8/9
a <- fread("~/Downloads/Tc_GiniIndex.csv")
a[1,]
a <- fread("~/Downloads/Tc_GiniIndex-2.csv")
a[1,]
a[order(a$gini,decreasing=T)e,]
a[order(a$gini,decreasing=T),]
b <- fread("~/Downloads/Th_GiniIndex-3.csv")
b[order(b$gini,decreasing=T),]
b[order(b$cell_count,decreasing=T),]
a[order(a$cell_count,decreasing=T),]
L = 3e9*.01
d = m/(2N)
d=0.4
N = (2d)/m
m = 10e6
N = (2d)/m
N = (2*d)/m
N
N = m/(2*d)
N
d = 100e9/(2*N)
d
d = (1-N/m*(1-exp(-m/N)))
d
m
N
m = 1e7
d = (1-N/m*(1-exp(-m/N)))
d
N = 2e6
N = 2e7
d = (1-N/m*(1-exp(-m/N)))
d
N = 1e7
d = (1-N/m*(1-exp(-m/N)))
d
N = 9e6
d = (1-N/m*(1-exp(-m/N)))
d
m
N
m = 100e6
m
d = (1-N/m*(1-exp(-m/N)))
d
N
d = (1-N/m*(1-exp(-m/N)))
m
m=2e8
d = (1-N/m*(1-exp(-m/N)))
d
a<-fread("~/Downloads/Th_giniIndex (1).csv")
library(data.table)
a<-fread("~/Downloads/Th_giniIndex (1).csv")
b<-fread("~/Downloads/Tc_giniIndex (1).csv")
a[1,]
a[order(a$gini,decreasing=T),]
b[order(b$gini,decreasing=T),]
b[order(b$gini,decreasing=T),][1:20,]
exp(-1)
library(data.table)
th <- fread("Th_giniIndex_hiseq.csv")
tc <- fread("Tc_giniIndex_hiseq.csv")
setwd("~/Box Sync/Papers/In Preparation/2018.Subramaniam.sceQTL/")
setwd("~/Box Sync/Papers/In Preparation/2018.Subramaniam.sceQTL/figures/lupus_paper/figure4.lymphoid.T/")
library(data.table)
th <- fread("Th_giniIndex_hiseq.csv")
tc <- fread("Tc_giniIndex_hiseq.csv")
th
tc
df <- rbind(cbind(th, type="T4"), cbind(tc, type="T8"))
df
ggplot(aes(disease, gini),data=df)+geom_boxplot()+theme_bw()
ggplot2(aes(disease, gini),data=df)+geom_boxplot()+theme_bw()
library(data.table)
library(ggplot2)
th <- fread("Th_giniIndex_hiseq.csv")
tc <- fread("Tc_giniIndex_hiseq.csv")
df <- rbind(cbind(th, type="T4"), cbind(tc, type="T8"))
df$disease = "SLE";
df$disease[grep("IGTB",df$sample)] = "Ctrl";
ggplot2(aes(disease, gini),data=df)+geom_boxplot()+theme_bw()
ggplot(aes(disease, gini),data=df)+geom_boxplot()+theme_bw()
ggplot(aes(disease, gini, color=type),data=df)+geom_boxplot()+theme_bw()
ggsave(plot, "figures.V6/gini.png")
ggsave(plot, file="figures.V6/gini.png")
library(data.table)
library(ggplot2)
th <- fread("Th_giniIndex_hiseq.csv")
tc <- fread("Tc_giniIndex_hiseq.csv")
df <- rbind(cbind(th, type="T4"), cbind(tc, type="T8"))
df$disease = "SLE";
df$disease[grep("IGTB",df$sample)] = "Ctrl";
plot = ggplot(aes(disease, gini, color=type),data=df)+geom_boxplot()+theme_bw()
ggsave(plot, file="figures.V6/gini.png")
ggsave(plot, file="figures.V6/gini.png", height=3, width=3)
th_clones <- fread("Th_sharedclones_hiseq_CDR3.csv")
tc_clones <- fread("Tc_sharedclones_hiseq_CDR3.csv")
tcr <- fread("TCR_paired_final_hiseq.csv")
th_clones
tc_clones
tc_clones[order(tc_clones$group.shared, decreasing=T),]
th_clones <- fread("Th_sharedclones_hiseq_CDR3.csv")
tc_clones <- fread("Tc_sharedclones_hiseq_CDR3.csv")
tcr <- fread("TCR_paired_final_hiseq.csv")
th_clones <- fread("Th_sharedclones_hiseq_CDR3.csv")
tc_clones <- fread("Tc_sharedclones_hiseq_CDR3.csv")
tcr <- fread("TCR_paired_final_hiseq.csv")
tc_clones[order(tc_clones$group.shared, decreasing=T),][1:10,]
tc_clones[order(tc_clones$group.shared, decreasing=T),][1:100,]
th_clones[order(th_clones$group.shared, decreasing=T),][1:100,]
tc_clones[order(tc_clones$group.shared, decreasing=T),][1:100,]
tc_clones[order(tc_clones$group.shared, decreasing=T),][1:10,]
tcr
2^0.56
log(0.56)
a<-fread("~/Downloads/Lymphocyte_CrossX_Flare_Correlations.csv")
a[1,]
pehatmap(a[,-1])
rownames(a) <- a$V1
a = a[,-1]
dim(a)
pheatmap(a)
library(pheatmap)
library("pheatmap")
install.packages("pheatmap")
library("pheatmap")
pheatmap(a)
a
a
rownames(a)
a<-fread("~/Downloads/Lymphocyte_CrossX_Flare_Correlations.csv")
rownames(a) <- as.string(a$V1)
rownames(a) <- as.character(a$V1)
a = a[,-1]
pheatmap(a)
a<-fread("~/Downloads/Lymphocyte_CrossX_Flare_Correlations.csv")
a$V1
colnames(a)
pheatmap(a)
a
rownames(a) <- as.character(a$V1)
a
rownames(a)
colnames(a)
a = a[,-1]
rownames(a)
a<-fread("~/Downloads/Lymphocyte_CrossX_Flare_Correlations.csv")
rownames(a) <- as.character(a$V1)
b <- data.frame(a[,-1])
b
rownames(b)
rownames(b) <- rownames(a)
colnames(b) <- colnames(a)
dim(b)
dim(a)
colnames(b) <- colnames(a)[-1]
pheatmap(a)
pheatmap(b)
a<-fread("~/Downloads/Myeloid_CrossX_Flare_Correlations.csv")
rownames(a) <- as.character(a$V1)
b_mono <- data.frame(a[,-1])
colnames(b_mono) <- colnames(a)[-1]
rownames(b_mono) <- rownames(a)
pheatmap(b)
pheatmap(b_mono)
a
